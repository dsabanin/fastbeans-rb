class RequestTest < MiniTest::Unit::TestCase

  def setup
    @conn = MockConnection.new
    @req = Fastbeans::Request.new(@conn)
    @test_msg = ['+', 1, 2, 3]
    @test_sign = '2446e1d1a2947cfac9bbb0290b40d413'
    @test_msgpack = "\x92\xDA\0 2446e1d1a2947cfac9bbb0290b40d413\x94\xA1+\x01\x02\x03"
    @test_msgpack.force_encoding("BINARY")
  end

  def test_should_sign_call_data
    samples = {
      ['a', 1, 2, 3] => '60fb262a7b770985a64bb29e84d92af4',
      ['a', 1, 2, {:a => 3}] => '3d8e75d66df7134d7260954c6e9c3b64',
      ['clojure.something/blah', [1, 2, 3]] => 'f8c15a77f1c43ccd1ca29b0b6d969e9f',
      ['hello'] => '1f0bf5038e61951a95c4a2a9db7c400a',
      [:hello] => '776222fe61dcc5551da706f3ec5c12c1',
      @test_msg => @test_sign
    }
    samples.each do |inp, outp|
      assert_equal outp, @req.sign(inp), "Wrong signature for #{inp}"
    end
  end

  def test_build_payload
    signature, payload = @req.build_payload(@test_msg)
    assert_equal @test_sign, signature
    assert_equal @test_msgpack, payload
    if payload.respond_to?(:force_encoding)
      # Ruby 2.0 case
      assert_equal Encoding::BINARY, payload.encoding
    end
  end

  def test_write_payload
    io = StringIO.new
    @req.write_payload(io, "simple-test")
    io.rewind
    assert_equal "\0\0\0\vsimple-test", io.read
  end

  def test_read_response
    io = StringIO.new(@test_msgpack)
    resp = @req.read_response(io, @test_msg)
    assert_instance_of Fastbeans::Response, resp
    assert_equal '2446e1d1a2947cfac9bbb0290b40d413', resp.signature
    assert_equal @test_msg, resp.payload
  end

  def test_perform
    @conn.socket = StringIO.new
    @req.expects(:build_payload).with(@test_msg).returns([@test_sign, @test_msgpack])
    @req.expects(:write_payload).with(@conn.socket, @test_msgpack)
    resp = mock
    resp.expects(:signed_with?).with(@test_sign).returns(true)
    resp.expects(:payload).returns(@test_msg)
    resp.expects(:error?).returns(false)
    @req.expects(:read_response).with(@conn.socket, @test_msg).returns(resp)

    assert_equal @test_msg, @req.perform(@test_msg)
  end

  def test_perform_signature_failure
    @conn.socket = StringIO.new
    @req.expects(:build_payload).with(@test_msg).returns([@test_sign, @test_msgpack])
    @req.expects(:write_payload).with(@conn.socket, @test_msgpack)
    resp = mock
    resp.expects(:signed_with?).with(@test_sign).returns(false)
    resp.expects(:signature).returns("incorrectsignature")
    resp.expects(:error?).returns(false)
    @req.expects(:read_response).with(@conn.socket, @test_msg).returns(resp)

    assert_raises Fastbeans::ResponseSignatureMismatch do
      @req.perform(@test_msg)
    end
  end

  def test_perform_with_exception
    @conn.socket = StringIO.new
    @req.expects(:build_payload).with(@test_msg).returns([@test_sign, @test_msgpack])
    @req.expects(:write_payload).with(@conn.socket, @test_msgpack)
    resp = mock
    resp.expects(:error?).returns(true)
    resp.expects(:payload).raises(Fastbeans::AutogeneratedException)
    @req.expects(:read_response).with(@conn.socket, @test_msg).returns(resp)

    assert_raises Fastbeans::AutogeneratedException do
      @req.perform(@test_msg)
    end
  end
end
